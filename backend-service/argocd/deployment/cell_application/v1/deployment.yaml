---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: raw-data-generator-demo-v1
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  labels:
    app: raw-data-generator-demo-v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: raw-data-generator-demo-v1
  template:
    metadata:
      labels:
        app: raw-data-generator-demo-v1
    spec:
      containers:
      - name: raw-data-generator-demo-v1
        image: ghcr.io/nicc777/container-python4aws:v3.12.3-3
        env:
        - name: DEBUG
          value: "1"
        - name: KAFKA_BOOTSTRAP_SERVER
          value: "kafka.confluent.svc.cluster.local"
        - name: KAFKA_BOOTSTRAP_PORT
          value: "9092"
        - name: SCHEMA_SERVER_HOST
          value: "schemaregistry.confluent.svc.cluster.local"
        - name: SCHEMA_SERVER_PORT
          value: "8081"
        - name: KAFKA_TOPIC
          value: "raw-data-in"
        - name: SCHEMA_VERSION
          value: "1"
        # SCHEMA_SUBJECT is linked to the kind: Schema.metadata.name deployed before this application starts... 
        - name: SCHEMA_SUBJECT
          value: "testrawdata"
        - name: SCHEMA_NAMESPACE
          value: "tld.example"
        # If MAX_COUNTER_VALUE is -1 (default), the data production will continue indefinitely. 
        - name: MAX_COUNTER_VALUE
          value: "10000"
        volumeMounts:
        - name: raw-data-generator-code-vol
          mountPath: "/tmp/code"
          readOnly: true
        - name: launcher-script-vol
          mountPath: "/tmp/scripts"
          readOnly: true
        ports:
        - containerPort: 8080
        livenessProbe:
          exec:
            command:
            - cat
            - /tmp/code/main.py
          initialDelaySeconds: 1
          periodSeconds: 1
        readinessProbe:
          exec:
            command:
            - cat
            - /tmp/code/main.py
          initialDelaySeconds: 1
          periodSeconds: 1
        command: ["/bin/bash"]
        args: ["/tmp/scripts/launcher.sh"]
      volumes:
      - name: raw-data-generator-code-vol
        configMap:
          name: raw-data-generator-python-cm
          items:
          - key: main.py
            path: main.py
      - name: launcher-script-vol
        configMap:
          name: launcher-script-v1-cm
          items:
          - key: launcher.sh
            path: launcher.sh
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-end-demo-v1
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  labels:
    app: back-end-demo-v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: back-end-demo-v1
  template:
    metadata:
      labels:
        app: back-end-demo-v1
    spec:
      containers:
      - name: back-end-demo-v1
        image: ghcr.io/nicc777/container-python4aws:v3.12.3-3
        env:
        - name: DEBUG
          value: "1"
        - name: KAFKA_BOOTSTRAP_SERVER
          value: "kafka.confluent.svc.cluster.local"
        - name: KAFKA_BOOTSTRAP_PORT
          value: "9092"
        - name: SCHEMA_SERVER_HOST
          value: "schemaregistry.confluent.svc.cluster.local"
        - name: SCHEMA_SERVER_PORT
          value: "8081"
        - name: KAFKA_TOPIC
          value: "raw-data-in"
        # Specify the group ID in order to have multiple nodes process the incoming data. Default group id is the hostname of the Pod
        - name: GROUP_ID
          value: "raw-group1"
        - name: SCHEMA_VERSION
          value: "1"
        # SCHEMA_SUBJECT is linked to the kind: Schema.metadata.name deployed before this application starts... 
        - name: SCHEMA_SUBJECT
          value: "testrawdata"
        - name: SCHEMA_NAMESPACE
          value: "tld.example"
        - name: VALKEY_SERVER_HOST
          value: "valkey-backend-primary"
        - name: VALKEY_SERVER_PORT
          value: "6379"
        volumeMounts:
        - name: back-end-code-vol
          mountPath: "/tmp/code"
          readOnly: true
        - name: launcher-script-vol
          mountPath: "/tmp/scripts"
          readOnly: true
        ports:
        - containerPort: 8080
        livenessProbe:
          exec:
            command:
            - cat
            - /tmp/code/main.py
          initialDelaySeconds: 1
          periodSeconds: 1
        readinessProbe:
          exec:
            command:
            - cat
            - /tmp/code/main.py
          initialDelaySeconds: 1
          periodSeconds: 1
        command: ["/bin/bash"]
        args: ["/tmp/scripts/launcher.sh"]
      volumes:
      - name: back-end-code-vol
        configMap:
          name: back-end-python-cm
          items:
          - key: main.py
            path: main.py
      - name: launcher-script-vol
        configMap:
          name: launcher-script-v1-cm
          items:
          - key: launcher.sh
            path: launcher.sh
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-end-aggregator-producer-v1
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  labels:
    app: back-end-aggregator-producer-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: back-end-aggregator-producer-v1
  template:
    metadata:
      labels:
        app: back-end-aggregator-producer-v1
    spec:
      containers:
      - name: back-end-aggregator-producer-v1
        image: ghcr.io/nicc777/container-python4aws:v3.12.3-3
        env:
        - name: DEBUG
          value: "1"
        - name: KAFKA_BOOTSTRAP_SERVER
          value: "kafka.confluent.svc.cluster.local"
        - name: KAFKA_BOOTSTRAP_PORT
          value: "9092"
        - name: SCHEMA_SERVER_HOST
          value: "schemaregistry.confluent.svc.cluster.local"
        - name: SCHEMA_SERVER_PORT
          value: "8081"
        - name: KAFKA_TOPIC
          value: "summary-stats"
        - name: SCHEMA_VERSION
          value: "1"
        # SCHEMA_SUBJECT is linked to the kind: Schema.metadata.name deployed before this application starts... 
        - name: SCHEMA_SUBJECT
          value: "testsummarystats"
        - name: SCHEMA_NAMESPACE
          value: "tld.example"
        - name: VALKEY_SERVER_HOST
          value: "valkey-backend-primary"
        - name: VALKEY_SERVER_PORT
          value: "6379"
        volumeMounts:
        - name: back-end-aggregator-producer-code-vol
          mountPath: "/tmp/code"
          readOnly: true
        - name: launcher-script-vol
          mountPath: "/tmp/scripts"
          readOnly: true
        ports:
        - containerPort: 8080
        livenessProbe:
          exec:
            command:
            - cat
            - /tmp/code/main.py
          initialDelaySeconds: 1
          periodSeconds: 1
        readinessProbe:
          exec:
            command:
            - cat
            - /tmp/code/main.py
          initialDelaySeconds: 1
          periodSeconds: 1
        command: ["/bin/bash"]
        args: ["/tmp/scripts/launcher.sh"]
      volumes:
      - name: back-end-aggregator-producer-code-vol
        configMap:
          name: back-end-aggregator-producer-python-cm
          items:
          - key: main.py
            path: main.py
      - name: launcher-script-vol
        configMap:
          name: launcher-script-v1-cm
          items:
          - key: launcher.sh
            path: launcher.sh
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end-aggregator-consumer-v1
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  labels:
    app: from-end-aggregator-consumer-v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: front-end-aggregator-consumer-v1
  template:
    metadata:
      labels:
        app: front-end-aggregator-consumer-v1
    spec:
      containers:
      - name: front-end-aggregator-consumer-v1
        image: ghcr.io/nicc777/container-python4aws:v3.12.3-3
        env:
        - name: DEBUG
          value: "1"
        - name: KAFKA_BOOTSTRAP_SERVER
          value: "kafka.confluent.svc.cluster.local"
        - name: KAFKA_BOOTSTRAP_PORT
          value: "9092"
        - name: SCHEMA_SERVER_HOST
          value: "schemaregistry.confluent.svc.cluster.local"
        - name: SCHEMA_SERVER_PORT
          value: "8081"
        - name: KAFKA_TOPIC
          value: "summary-stats"
        # Specify the group ID in order to have multiple nodes process the incoming data. Default group id is the hostname of the Pod
        - name: GROUP_ID
          value: "summary-group1"
        - name: SCHEMA_VERSION
          value: "1"
        # SCHEMA_SUBJECT is linked to the kind: Schema.metadata.name deployed before this application starts... 
        - name: SCHEMA_SUBJECT
          value: "testsummarystats"
        - name: SCHEMA_NAMESPACE
          value: "tld.example"
        - name: VALKEY_SERVER_HOST
          value: "valkey-frontend-primary"
        - name: VALKEY_SERVER_PORT
          value: "6379"
        volumeMounts:
        - name: front-end-aggregator-consumer-code-vol
          mountPath: "/tmp/code"
          readOnly: true
        - name: launcher-script-vol
          mountPath: "/tmp/scripts"
          readOnly: true
        ports:
        - containerPort: 8080
        livenessProbe:
          exec:
            command:
            - cat
            - /tmp/code/main.py
          initialDelaySeconds: 1
          periodSeconds: 1
        readinessProbe:
          exec:
            command:
            - cat
            - /tmp/code/main.py
          initialDelaySeconds: 1
          periodSeconds: 1
        command: ["/bin/bash"]
        args: ["/tmp/scripts/launcher.sh"]
      volumes:
      - name: front-end-aggregator-consumer-code-vol
        configMap:
          name: front-end-aggregator-consumer-python-cm
          items:
          - key: main.py
            path: main.py
      - name: launcher-script-vol
        configMap:
          name: launcher-script-v1-cm
          items:
          - key: launcher.sh
            path: launcher.sh
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end-ui-rest-v1
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  labels:
    app: front-end-ui-rest-v1
spec:
  replicas: 5
  selector:
    matchLabels:
      app: front-end-ui-rest-v1
  template:
    metadata:
      labels:
        app: front-end-ui-rest-v1
    spec:
      containers:
      - name: front-end-ui-rest-v1
        image: ghcr.io/nicc777/container-python4aws:v3.12.3-3
        env:
        - name: DEBUG
          value: "1"
        - name: VALKEY_SERVER_HOST
          value: "valkey-frontend-primary"
        - name: VALKEY_SERVER_PORT
          value: "6379"
        volumeMounts:
        - name: front-end-ui-rest-code-vol
          mountPath: "/tmp/code"
          readOnly: true
        - name: launcher-script-vol
          mountPath: "/tmp/scripts"
          readOnly: true
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        command: ["/bin/bash"]
        args: ["/tmp/scripts/launcher.sh"]
      volumes:
      - name: front-end-ui-rest-code-vol
        configMap:
          name: front-end-ui-rest-api-python-cm
          items:
          - key: main.py
            path: main.py
      - name: launcher-script-vol
        configMap:
          name: launcher-script-v1-cm
          items:
          - key: launcher.sh
            path: launcher.sh
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "3"
  name: rest-api-v1
spec:
  selector:
    app: front-end-ui-rest-v1
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  
