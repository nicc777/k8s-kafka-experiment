
# PERMISSIONS
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-ctrl-sa
  annotations:
    argocd.argoproj.io/sync-wave: "1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: app-ctrl-eventlistener-binding
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
- kind: ServiceAccount
  name: app-ctrl-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-roles
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: app-ctrl-eventlistener-clusterbinding
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
- kind: ServiceAccount
  name: app-ctrl-sa
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-clusterroles

# WEBHOOK....

# Expected body JSON template:
#
# {
#   "command": "string",
#   "app_version": "v1|v2|v3",
#   "canary_config": "v1:90,v2:10",
#   "pause_time_post_schema_deployment": 10,
#   "domain": "example.tld"
# }
---
  apiVersion: triggers.tekton.dev/v1beta1
  kind: EventListener
  metadata:
    name: app-ctrl-event-listener
  spec:
    triggers:
    - name: app-ctrl-event-listener
      interceptors: 
      - name: "Command"
        ref:
          name: "cel"
        params:
        - name: "filter"
          value: "body.command in ['test', 'build_and_deploy_app_version', 'delete_app_version', 'deploy_canary', 'delete_canary', 'deploy_debug_app', 'delete_debug_app']"
      bindings:
        - ref: app-ctrl-trigger-binding
      template:
        ref: app-ctrl-trigger-template
    resources:
      kubernetesResource:
        spec:
          template:
            spec:
              # serviceAccountName: app-ctrl-sa
              serviceAccountName: tmp-admin-sa
              containers:
              - resources:
                  requests:
                    memory: "64Mi"
                    cpu: "250m"
                  limits:
                    memory: "128Mi"
                    cpu: "500m"
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: app-ctrl-trigger-binding
spec:
  params: 
  - name: command
    value: $(body.command)
  - name: app_version
    value: $(body.app_version)
  - name: canary_config
    value: $(body.canary_config)
  - name: pause_time_post_schema_deployment
    value: $(body.pause_time_post_schema_deployment)
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: app-ctrl-trigger-template
spec:
  params:
  - name: command
    default: "test"
  - name: app_version
    default: "v1"
  - name: canary_config
    default: "v1:50,v1:50"
  - name: pause_time_post_schema_deployment
    default: "10"
  - name: domain
    default: "example.tld"
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: app-ctrl-run-
    spec:
      serviceAccountName: tmp-admin-sa
      taskSpec:
        steps:
        - image: ghcr.io/nicc777/container-python4aws:v3.12.3-3
          name: manage-base-resources
          script: |
            #!/usr/bin/env bash
            apt install -y bc
            cd /tmp
            git clone https://github.com/nicc777/k8s-kafka-experiment.git
            export COMMAND=$(tt.params.command)
            export APP_VERSION=$(tt.params.app_version)
            export CANARY_CONFIG=$(tt.params.canary_config)
            export PAUSE_TIME_POST_SCHEMA_DEPLOYMENT=$(tt.params.pause_time_post_schema_deployment)
            export DOMAIN=$(tt.params.domain)
            case $COMMAND in
                build_and_deploy_app_version)
                    echo "Building and deploying version ${APP_VERSION} of the application"
                    bash /tmp/k8s-kafka-experiment/backend-service/build.sh || true
                    ;;
                delete_app_version)
                    echo "Deleting version ${APP_VERSION} of the application"
                    bash /tmp/k8s-kafka-experiment/backend-service/delete_deployments.sh || true
                    ;;
                deploy_canary)
                    echo "Enabling a canary release of the app"
                    bash /tmp/k8s-kafka-experiment/backend-service/canary_deploy.sh || true
                    ;;
                delete_canary)
                    echo "Removing the canary and setting version ${APP_VERSION} as the primary running version"
                    bash /tmp/k8s-kafka-experiment/backend-service/canary_delete.sh || true
                    ;;
                deploy_debug_app)
                    echo "Deploying debug app with script ${APP_VERSION}"
                    export MODE=DEPLOY
                    bash /tmp/k8s-kafka-experiment/backend-service/manage_debug_app_deployment.sh || true
                    ;;
                delete_debug_app)
                    echo "Deploying debug app with script ${APP_VERSION}"
                    export MODE=DELETE
                    bash /tmp/k8s-kafka-experiment/backend-service/manage_debug_app_deployment.sh || true
                    ;;
                *)
                    echo "Running default TEST script"
                    bash /tmp/k8s-kafka-experiment/backend-service/test.sh || true
                    ;;
            esac


