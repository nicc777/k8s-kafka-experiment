
# PERMISSIONS
apiVersion: v1
kind: ServiceAccount
metadata:
  name: helm-pipelines-sa
  annotations:
    argocd.argoproj.io/sync-wave: "1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: helm-pipelines-eventlistener-binding
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
- kind: ServiceAccount
  name: helm-pipelines-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-roles
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: helm-pipeline-eventlistener-clusterbinding
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
- kind: ServiceAccount
  name: helm-pipelines-sa
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-clusterroles

# WEBHOOK....
---
  apiVersion: triggers.tekton.dev/v1beta1
  kind: EventListener
  metadata:
    name: helm-pipelines-event-listener
  spec:
    triggers:
    - name: helm-pipelines-event-listener
      interceptors: 
      - name: "Command"
        ref:
          name: "cel"
        params:
        - name: "filter"
          value: "body.command in ['apply', 'delete']"
      bindings:
        - ref: helm-pipelines-trigger-binding
      template:
        ref: helm-pipelines-trigger-template
    resources:
      kubernetesResource:
        spec:
          template:
            spec:
              serviceAccountName: helm-pipelines-sa
              containers:
              - resources:
                  requests:
                    memory: "64Mi"
                    cpu: "250m"
                  limits:
                    memory: "128Mi"
                    cpu: "500m"
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: helm-pipelines-trigger-binding
spec:
  params: 
  - name: command
    value: $(body.command)
---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: helm-pipelines-trigger-template
spec:
  params:
  - name: command
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: helm-pipelines-run-
    spec:
      taskSpec:
        volumes:
        - name: apply-volume
          configMap:
            name: helm-pipelines-apply-script-cm
        - name: delete-volume
          configMap:
            name: helm-pipelines-delete-script-cm
        - name: valkey-values-volume
          configMap:
            name: helm-pipelines-valkey-values-cm
        steps:
        - image: ghcr.io/nicc777/container-python4aws:v3.12.3-3
          name: install-helm-charts
          script: |
            #!/bin/bash
            export DEBIAN_FRONTEND=noninteractive
            #apt update && apt install -y curl
            #curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            echo "I am running as user " `whoami`
            sh /scripts/$(tt.params.command)/exec.sh || true
          volumeMounts:
          - name: apply-volume
            mountPath: /scripts/apply
          - name: delete-volume
            mountPath: /scripts/delete
          - name: valkey-values-volume
            mountPath: /data/custom-helm-values/valkey

---
# FIXME
# Current error (only on CIVO, not on Microk8s): 
#   2024-10-26T15:13:00.556984628Z Error: INSTALLATION FAILED: Unable to continue with install: could not get information about the resource NetworkPolicy "valkey" in namespace "exp": networkpolicies.networking.k8s.io "valkey" is forbidden: User "system:serviceaccount:default:default" cannot get resource "networkpolicies" in API group "networking.k8s.io" in the namespace "exp"
# It seems this error is related to permissions and additional controls based on the platform.
apiVersion: v1
kind: ConfigMap
metadata:
  name: helm-pipelines-apply-script-cm
data:
  exec.sh: |
    echo "I AM AN APPLY SCRIPT"
    helm version
    #!/bin/bash
    export NAMESPACE="exp"
    export VALKEY_RELEASE_NAME="valkey"
    export VALKEY_CHART_URI="oci://registry-1.docker.io/bitnamicharts/valkey"
    if helm ls -n $NAMESPACE --filter ^$VALKEY_RELEASE_NAME$ | grep -q $VALKEY_RELEASE_NAME; then
      echo "Helm release $VALKEY_RELEASE_NAME already exists in namespace $NAMESPACE."
    else
      echo "Installing Helm chart $VALKEY_CHART_URI as release $VALKEY_RELEASE_NAME in namespace $NAMESPACE."
      helm install -f /data/custom-helm-values/valkey/values.yaml $VALKEY_RELEASE_NAME $VALKEY_CHART_URI --namespace $NAMESPACE
    fi
    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: helm-pipelines-delete-script-cm
data:
  exec.sh: |
    echo "I AM AN DELETE SCRIPT"
    helm version
    helm delete -n exp valkey 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: helm-pipelines-valkey-values-cm
data:
  values.yaml: |
    auth:
      enabled: false
      sentinel: false
    replica:
      replicaCount: 1
    metrics:
      enabled: true


